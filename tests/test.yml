---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Playbook for establishing ssh keys
  hosts: 127.0.0.1
  connection: local
  become: false
  pre_tasks:
    - name: Create ssh key pair for root
      user:
        name: "{{ ansible_ssh_user }}"
        generate_ssh_key: "yes"
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/id_rsa"
    - name: Get the calling user's key
      command: cat ~/.ssh/id_rsa.pub
      register: key_get
    - set_fact:
        lxc_container_ssh_key: "{{ key_get.stdout }}"

- name: Playbook for configuring the LXC host
  hosts: localhost
  connection: local
  become: yes
  pre_tasks:
    # Make sure OS does not have a stale package cache.
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'
    - name: Ensure root's new public ssh key is in authorized_keys
      authorized_key:
        user: root
        key: "{{ hostvars['127.0.0.1']['lxc_container_ssh_key'] }}"
        manage_dir: no
    - set_fact:
        lxc_container_ssh_key: "{{ hostvars['127.0.0.1']['lxc_container_ssh_key'] }}"
    - name: Check if this is an OpenStack-CI nodepool instance
      stat:
        path: /etc/nodepool/provider
      register: nodepool
    - name: Set the files to copy into the container cache for OpenStack-CI instances
      set_fact:
        lxc_container_cache_files:
          - { src: '/etc/pip.conf', dest: '/etc/pip.conf' }
      when: nodepool.stat.exists | bool
  roles:
    - role: "lxc_hosts"
      lxc_net_address: 10.100.100.1
      lxc_net_dhcp_range: 10.100.100.8,10.100.100.253
      lxc_net_bridge: lxcbr0
      lxc_kernel_options:
        - { key: 'fs.inotify.max_user_instances', value: 1024 }
  post_tasks:
    # Inventory is being pre-loaded using a post tasks instead of through a dynamic
    #  inventory system. While this is not a usual method for deployment it's being
    #  done for functional testing.
    - name: Create container hosts
      add_host:
        groups: "{{ item.groups }}"
        hostname: "{{ item.name }}"
        inventory_hostname: "{{ item.name }}"
        ansible_ssh_host: "{{ item.address }}"
        ansible_become: true
        properties:
          service_name: "{{ item.service }}"
        container_networks:
          management_address:
            address: "{{ item.address }}"
            bridge: "lxcbr0"
            interface: "eth1"
            netmask: "255.255.252.0"
            type: "veth"
        physical_host: localhost
        container_name: "{{ item.name }}"
      with_items:
        - { name: "infra1", service: "infra1", address: "10.100.100.2", groups: "all,all_containers,rabbitmq_all,galera_all,service_all" }
        - { name: "openstack1", service: "openstack1", address: "10.100.100.3", groups: "all,all_containers,keystone_all,aodh_all,aodh_alarm_notifier,aodh_alarm_evaluator,aodh_api,aodh_listener" }

- name: Playbook for creating containers
  hosts: all_containers
  connection: local
  gather_facts: false
  roles:
    - role: "lxc_container_create"
      lxc_container_release: trusty
      lxc_container_backing_store: dir
      global_environment_variables:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  post_tasks:
    - name: Wait for ssh to be available
      local_action:
        module: wait_for
        port: "{{ ansible_ssh_port | default('22') }}"
        host: "{{ ansible_ssh_host | default(inventory_hostname) }}"
        search_regex: OpenSSH
        delay: 1

- name: Playbook for deploying infra services
  hosts: service_all
  user: root
  gather_facts: true
  roles:
    - role: "galera_server"
      galera_root_password: secrete
      galera_root_user: root
      galera_innodb_buffer_pool_size: 512M
      galera_innodb_log_buffer_size: 32M
      galera_server_id: "{{ inventory_hostname | string_2_int }}"
      galera_wsrep_node_name: "{{ inventory_hostname }}"
      galera_wsrep_provider_options:
        - { option: "gcache.size", value: "32M" }
      galera_server_id: "{{ inventory_hostname | string_2_int }}"
    - role: "rabbitmq_server"
      rabbitmq_cookie_token: secrete

- name: Playbook for deploying keystone
  hosts: keystone_all
  user: root
  gather_facts: true
  pre_tasks:
    - name: Ensure rabbitmq vhost
      rabbitmq_vhost:
        name: "{{ keystone_rabbitmq_vhost }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['keystone_all'][0]
    - name: Ensure rabbitmq user
      rabbitmq_user:
        user: "{{ keystone_rabbitmq_userid }}"
        password: "{{ keystone_rabbitmq_password }}"
        vhost: "{{ keystone_rabbitmq_vhost }}"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['keystone_all'][0]
    - name: Create DB for service
      mysql_db:
        login_user: "root"
        login_password: "secrete"
        login_host: "localhost"
        name: "{{ keystone_galera_database }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['keystone_all'][0]
    - name: Grant access to the DB for the service
      mysql_user:
        login_user: "root"
        login_password: "secrete"
        login_host: "localhost"
        name: "{{ keystone_galera_database }}"
        password: "{{ keystone_container_mysql_password }}"
        host: "{{ item }}"
        state: "present"
        priv: "{{ keystone_galera_database }}.*:ALL"
      with_items:
        - "localhost"
        - "%"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['keystone_all'][0]
  roles:
    - role: os_keystone
  vars:
    external_lb_vip_address: 10.100.100.3
    internal_lb_vip_address: 10.100.100.3
    keystone_galera_address: 10.100.100.2
    keystone_galera_database: keystone
    keystone_venv_tag: "testing"
    keystone_developer_mode: true
    keystone_git_install_branch: master
    keystone_requirements_git_install_branch: master
    keystone_auth_admin_token: "SuperSecreteTestToken"
    keystone_auth_admin_password: "SuperSecretePassword"
    keystone_service_password: "secrete"
    keystone_rabbitmq_password: "secrete"
    keystone_container_mysql_password: "SuperSecrete"
    keystone_rabbitmq_port: 5671
    keystone_rabbitmq_userid: keystone
    keystone_rabbitmq_vhost: /keystone
    keystone_rabbitmq_servers: 10.100.100.2
    keystone_rabbitmq_use_ssl: false
    galera_client_drop_config_file: false

- name: Playbook for deploying aodh
  hosts: aodh_all
  user: root
  gather_facts: true
  pre_tasks:
    - name: Ensure rabbitmq vhost
      rabbitmq_vhost:
        name: "{{ aodh_rabbitmq_vhost }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['aodh_all'][0]
    - name: Ensure rabbitmq user
      rabbitmq_user:
        user: "{{ aodh_rabbitmq_userid }}"
        password: "{{ aodh_rabbitmq_password }}"
        vhost: "{{ aodh_rabbitmq_vhost }}"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['aodh_all'][0]
    - name: Create DB for service
      mysql_db:
        login_user: "root"
        login_password: "secrete"
        login_host: "localhost"
        name: "{{ aodh_database_name }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['aodh_all'][0]
    - name: Grant access to the DB for the service
      mysql_user:
        login_user: "root"
        login_password: "secrete"
        login_host: "localhost"
        name: "{{ aodh_database_name }}"
        password: "{{ aodh_container_db_password }}"
        host: "{{ item }}"
        state: "present"
        priv: "{{ aodh_database_name }}.*:ALL"
      with_items:
        - "localhost"
        - "%"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['aodh_all'][0]
  roles:
    - role: "{{ rolename | basename }}"
  tasks:
    # needed by the functional test playbook below
    - name: Install httplib2 so we can use the uri module
      pip:
        name: httplib2
  vars:
    external_lb_vip_address: 10.100.100.3
    internal_lb_vip_address: 10.100.100.3
    galera_root_password: "secrete"
    aodh_container_db_password: "secrete"
    aodh_db_address: 10.100.100.2
    aodh_database_name: aodh
    galera_client_drop_config_file: false
    aodh_rabbitmq_password: "secrete"
    aodh_rabbitmq_userid: aodh
    aodh_rabbitmq_vhost: /aodh
    aodh_rabbitmq_servers: 10.100.100.2
    aodh_rabbitmq_use_ssl: true
    aodh_rabbitmq_port: 5671
    keystone_admin_user_name: admin
    keystone_admin_tenant_name: admin
    keystone_auth_admin_password: "SuperSecretePassword"
    keystone_service_adminuri_insecure: false
    keystone_service_internaluri_insecure: false
    keystone_service_internaluri: "http://{{ internal_lb_vip_address }}:5000"
    keystone_service_internalurl: "{{ keystone_service_internaluri }}/v3"
    keystone_service_adminuri: "http://{{ internal_lb_vip_address }}:35357"
    keystone_service_adminurl: "{{ keystone_service_adminuri }}/v3"
    aodh_venv_tag: "testing"
    aodh_developer_mode: true
    aodh_git_install_branch: master
    aodh_requirements_git_install_branch: master
    aodh_service_password: "secrete"
    openrc_os_password: "{{ keystone_auth_admin_password }}"
    openrc_os_domain_name: "Default"
    memcached_servers: 127.0.0.1
    memcached_encryption_key: "secrete"

- name: Playbook for functional testing aodh
  hosts: aodh_all
  user: root
  gather_facts: false
  tasks:
    - name: Check the aodh-api
      uri:
        url: "http://localhost:8042"
        status_code: 401
      register: result
      until:
        - result is defined
        - result.status is defined
        - result.status == 401
      retries: 5
      delay: 10
